package com.dezza.ricepaper.util{	import flash.display.DisplayObject;	import flash.system.Capabilities;	/**	 * SwfUtils	 * Class description.	 *	 *	@author Derek McKenna	 *	@since  22 Sep 2008	 */	public class SwfUtil	{		/**		 * set this for the default target containing loader info		 */		public static var DEFAULT_TARGET : DisplayObject;		public function SwfUtil(access : SwfUtilConstructorAccess)		{		}		/**		 * Find out if swf is embedded in an html page (as opposed to standalone FlashPlayer/Flash IDE)		 * @return Boolean true if swf is embedded		 */		public static function isEmbedded() : Boolean		{			return (Capabilities.playerType == "PlugIn" || Capabilities.playerType == "ActiveX" );		}		public static function hasSwfVar(key : String, target : DisplayObject = null) : Boolean		{			if (!target) target = DEFAULT_TARGET;			if (!target)			{				throw new ArgumentError("SwfUtil.hasSwfVar() fails. Invalid target.");			}			if (!target.loaderInfo)			{				throw new Error("SwfUtil.hasSwfVar() fails. LoaderInfo not found in " + target);			}			return target.loaderInfo.parameters.hasOwnProperty(key);			// return !(target.loaderInfo.parameters[key] === undefined);		}		/**		 * Retrieve a param passed into the swf		 */		public static function getSwfVar(key : String, target : DisplayObject = null) : String		{			if (!target) target = DEFAULT_TARGET;			if (!target)			{				throw new Error("SwfUtil.getSwfVar() fails. Invalid target.");			}			if (!target.loaderInfo)			{				throw new Error("SwfUtil.getSwfVar() fails. LoaderInfo not found in " + target);			}			if (target.loaderInfo.parameters[key] == undefined)			{				throw new Error("SwfUtil.getSwfVar() fails. Parameter " + key + " not found in loaderInfo parameters of " + target);			}			return target.loaderInfo.parameters[key];		}		/**		 * Retrieve a param passed into the swf		 */		public static function getSwfVarAsBoolean(key : String, target : DisplayObject = null) : Boolean		{			var s : String = getSwfVar(key, target);			return (s == "1" || s.toLowerCase() == "true");		}		/**		 * Retrieve a param passed into the swf		 */		public static function getSwfVarAsNumber(key : String, target : DisplayObject = null) : Number		{			var n : Number = Number(getSwfVar(key, target));			if ( isNaN(n) ) throw new Error("SwfUtil.getSwfVarAsNumber() fails. Could not convert result to Number");			return n;		}		public static function debugSwfVars(target : DisplayObject) : String		{			if ( !target ) return null;			var obj : Object = target.loaderInfo.parameters;			var s : String = "";			for (var key : String in obj )			{				s += key + ":" + obj[key] + "\n";			}			return s;		}	}}internal class SwfUtilConstructorAccess{}