<?xml version="1.0"?>
<project name="ricepaper-framework" basedir=".." default="test">
<!-- set up a prefix for all environment variables -->
  <property environment="env."/>
<!-- load user properties to override defaults -->
  <property file="user.properties"/>
<!-- System environment must contain FLEX_HOME variable that points to Flex SDK -->
  <property name="FLEX_HOME" location="${env.FLEX_HOME}"/>
<!-- identify properties file -->
  <property file="build/build.properties"/>
<!-- Set up FlexUnit Ant tasks -->
  <taskdef resource="flexUnitTasks.tasks" classpath="${script.loc}/flexUnitTasks-4.0.0.jar"/>
  <target name="usage">
    <echo message=""/>
    <echo message="RicePaper Build Usage"/>
    <echo message="-----------------------------------"/>
    <echo message=""/>
    <echo message="Available targets are:"/>
    <echo message=""/>
    <echo message="test          --&gt; Build RP SWC and run unit tests"/>
    <echo message="asdoc         --&gt; Build RP SWC, test, and generate asdocs"/>
    <echo message="package       --&gt; Build RP SWC, test, and create release zip"/>
    <echo message="compile       --&gt; Build RP SWC"/>
    <echo message="clean         --&gt; Remove all folders created by build script"/>
    <echo message="init          --&gt; Clean and create build folders"/>
    <echo message=""/>
  </target>
<!-- Clean Build and Report files -->
  <target name="clean">
<!-- Remove all directories created during the build process -->
    <echo>[clean] Removing Build and Report directories</echo>
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${report.loc}" defaultexcludes="false">
        <include name="**/*"/>
      </fileset>
      <fileset dir="${dist.loc}" defaultexcludes="false">
        <include name="**/*"/>
      </fileset>
    </delete>
    <echo>[clean] Build and Report directories removed</echo>
  </target>
<!-- Create directories needed for the build process -->
  <target name="init" depends="clean">
    <echo>[init] Creating Bin and Report directories</echo>
    <mkdir dir="${bin.loc}"/>
    <mkdir dir="${report.loc}"/>
    <echo>[init] Bin and Report directories created</echo>
  </target>
<!-- Compile Release SWC -->
  <target name="compile" depends="init">
    <echo>[compile] Compiling release SWC</echo>
    <echo>[compile] Using Flex SDK at: ${FLEX_HOME}</echo>
	<echo>src path: ${main.src.loc} </echo>
		<echo>basedir: ${basedir} </echo>
    <java jar="${FLEX_HOME}/lib/compc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
<!-- Build our SWC with a versioned name. -->
      <arg value="-output=${bin.loc}/${project.name.versioned}.swc"/>
<!-- We want all the com package classes in the SWC being built. -->
      <arg value="-include-sources=${main.src.loc}/com"/>
<!-- Include classes from SWCs in this folder, but only the ones we use. -->
      <arg value="-library-path+=${lib.loc}"/>
<!-- Boolean mosh pit! -->
      <arg value="-incremental=true"/>
      <arg value="-static-link-runtime-shared-libraries=true"/>
      <arg value="-verbose-stacktraces=true"/>
      <arg value="-headless-server=true"/>
    </java>
    <echo>[compile] Release SWC ${project.name.versioned}.swc created successfully</echo>
  </target>
<!-- Run Unit Tests -->
  <target name="test" depends="compile">
    <echo>[test] Running Unit Tests</echo>
<!-- Compile TestRunner.mxml as a SWF -->
    <java jar="${FLEX_HOME}/lib/mxmlc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
      <arg value="${test.src.loc}/RicePaperTestRunner.mxml"/>
      <arg value="-source-path=${main.src.loc}"/>
<!-- Flash those sweet legs. Blink and you'll miss 'em. -->
      <arg value="-output=${bin.loc}/RicePaperTestRunner.swf"/>
      <arg value="-default-size=200,200"/>
      <arg value="-default-background-color=0x000000"/>
<!-- Include classes from SWCs in this folder, but only the ones we use. -->
      <arg value="-library-path+=${lib.loc}"/>
<!-- So true. -->
      <arg value="-incremental=true"/>
      <arg value="-verbose-stacktraces=true"/>
      <arg value="-headless-server=true"/>
    </java>
<!-- Execute TestRunner.swf as FlexUnit tests and publish reports -->
    <flexunit swf="bin/RicePaperTestRunner.swf" toDir="${report.loc}" haltonfailure="false" verbose="true" localTrusted="true"/>
<!-- Generate readable JUnit-style reports -->
    <junitreport todir="${report.loc}">
      <fileset dir="${report.loc}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${report.loc}/html"/>
    </junitreport>
    <echo>[test] Finished running Unit Tests</echo>
  </target>
<!-- Build Documentation -->
  <target name="asdoc" depends="test">
    <echo>[asdoc] Generating ASDOC documentation</echo>
    <tstamp>
      <format property="docgen.time" pattern="MM/dd/yyyy hh:mm aa" unit="hour"/>
    </tstamp>
    <java jar="${FLEX_HOME}/lib/asdoc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
      <arg line="-external-library-path ${lib.loc}"/>
      <arg line="-doc-sources ${main.src.loc}"/>
      <arg line="-source-path ${main.src.loc}"/>
      <arg line="-output ${doc.loc}"/>
      <arg value="-keep-xml=true"/>
      <!-- <arg value="-lenient=true"/> -->
      <arg line="-window-title 'RicePaper ${ricepaper.ver.num}'"/>
      <arg line="-main-title 'RicePaper ${ricepaper.ver.num}'"/>
      <arg line="-footer 'RicePaper - http://www.dezza.com/ricepaper/ - Documentation generated at: ${docgen.time}'"/>
      <arg line="-package com.dezza 'dezza library'"/>
    </java>
    <echo>[asdoc] ASDOC documentation generated successfully</echo>
  </target>
</project>
